//////////////////////////////////////////////////////////////////////////////
// Product: QEP/C++
// Last Updated for Version: 4.2.00
// Date of the Last Update:  Jul 05, 2011
//
//                    Q u a n t u m     L e a P s
//                    ---------------------------
//                    innovating embedded systems
//
// Copyright (C) 2002-2011 Quantum Leaps, LLC. All rights reserved.
//
// This software may be distributed and modified under the terms of the GNU
// General Public License version 2 (GPL) as published by the Free Software
// Foundation and appearing in the file GPL.TXT included in the packaging of
// this file. Please note that GPL Section 2[b] requires that all works based
// on this software must also be made publicly available under the terms of
// the GPL ("Copyleft").
//
// Alternatively, this software may be distributed and modified under the
// terms of Quantum Leaps commercial licenses, which expressly supersede
// the GPL and are specifically designed for licensees interested in
// retaining the proprietary status of their code.
//
// Contact information:
// Quantum Leaps Web site:  http://www.quantum-leaps.com
// e-mail:                  info@quantum-leaps.com
//////////////////////////////////////////////////////////////////////////////

// Assertions
-emacro(1960, Q_DEFINE_THIS_FILE)     // MISRA Rule 7-3-1
-emacro(1960, Q_DEFINE_THIS_MODULE)   // MISRA Rule 7-3-1
-emacro(960,  Q_ASSERT)               // MISRA rule 59
-emacro(1960, Q_ASSERT)               // MISRA Rule 6-4-1
-emacro(1960, Q_REQUIRE)              // MISRA Rule 6-4-1
-emacro(1960, Q_ENSURE)               // MISRA Rule 6-4-1
-emacro(1960, Q_ERROR)                // MISRA Rule 6-4-1
-emacro(1960, Q_ALLEGE)               // MISRA Rule 6-4-1

// QEP
-emacro(960, QEP_ENTER_)            // MISRA rule 59
-emacro(960, QEP_EXIT_)             // MISRA rule 59

// QS
-emacro(506, QS_BEGIN_)		// Constant value Boolean [MISRA Rule 52]
-emacro(774, QS_BEGIN_)     // Boolean within 'if' always False
-emacro(909, QS_BEGIN_)     // Implicit conversion from int to boolean
-emacro(572, QS_BEGIN_)     // MISRA Rule 38, excessive shift value
-emacro(778, QS_BEGIN_)     // Constant expression evaluates to 0
-emacro(912, QS_BEGIN_)     // Implicit conversion from int to unsigned int
-emacro(960, QS_END_)       // MISRA Rule 59, left brace expected
-emacro(725, QS_END_)       // Expected positive indentation
-emacro(717, QS_END_)       // do ... while(0)
-emacro(923, QS_OBJ_)       // MISRA Rule 45, cast from pointer to unsigned long
-emacro(923, QS_FUN_)       // MISRA Rule 45, cast from pointer to unsigned long
-emacro(717, QF_INT_LOCK)   // do ... while(0)
-emacro(717, QF_INT_UNLOCK) // do ... while(0)

// Miscallaneous
-e1924                  // C-style cast
